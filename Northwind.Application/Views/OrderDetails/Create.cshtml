@using Microsoft.AspNetCore.Components
@using Northwind.Application.Constants
@model Northwind.Application.Models.OrderDetail.OrderDetailCreateModel
@{
    ViewData["ControllerName"] = "OrderDetails";
    ViewData["PreviousPage"] = ViewBag.PreviousPage;
    var categoryId = ViewBag.CategoryId;
}

@if (Model.UnitsInStock == null || Model.UnitsInStock <= 0)
{
    <h1 class="fw-bold alert-danger">Sorry. Products are Out of Stock.</h1>
}
else
{
    <h1 class="fw-bold">Form "@ViewBag.ProductName" Order</h1>
}

<hr />

<div class="form-group" style="max-width:400px;">
    <form asp-action="Create" id="form" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <input name="OrderId" value="@Model.OrderId" hidden />
        <input name="ProductId" value="@Model.ProductId" hidden />
        <input name="UnitPrice" id="unitPrice" value="@Model.UnitPrice" hidden />
        @if (!User.IsInRole(UserRoles.Admin))
        {
            <input id="discount" type="number" name="Discount" value="@Model.Discount" hidden />
        }

        <div>
            <label class="fw-bold">Unit Price: </label>
            <span class="fw-normal">@(((decimal)(Model.UnitPrice ?? 0m)).ToString("f2")) $</span>
        </div>

        <div>
            <label class="fw-bold">Discount: </label>
            @if (User.IsInRole(UserRoles.Admin))
            {
                <input id="discount" onchange="onDiscountChange(value)" type="number" name="Discount" value="@Model.Discount" class="form-control" />
            }
            else
            {
                <span>@(Model.Discount) %</span>
            }
        </div>

        @if (Model.UnitsInStock > 0)
        {
            <strong id="overloadQuantityError" style="color:transparent">Not enough units in stock</strong>
            <div>
                <label class="fw-bold">Quantity</label>
                <button id="minus" onclick="onMinusClick()" style="width:30px;" type="button" disabled="disabled">
                    <span class="fw-bold" style="font-size:large;">-</span>
                </button>

                <input id="quantity" value="@Model.Quantity" name="Quantity" onchange="onQuantityChange(value)" class="quantity-border" style="max-width:170px;" />

                <button id="plus" onclick="onPlusClick()" style="width:30px;" type="button">
                    <span class="fw-bold" style="font-size:large;">+</span>
                </button>
            </div>

            <div class="pt-3">
                <label class="fw-bold">Total Cost: </label>
                <span id="totalCostLabel" class="fw-normal"></span>
                <label class="fw-normal"> $</label>
            </div>
        }
        
    </form>

    <div class="pt-3">
        <button id="addToOrderButton" type="submit" form="form" class="btn btn-primary fw-bold" disabled>Add To Order</button>
        <button class="btn btn-primary fw-bold float-end" onclick="location.href='@Url.ActionLink("Index", "Products", new { categoryId = categoryId })'">
            Back
        </button>
    </div>
</div>

<script>
    const unitPrice = parseFloat('@Model.UnitPrice.ToString()?.Replace(',','.')');
    const quantity = document.getElementById('quantity');
    const discount = document.getElementById('discount');
    const minus = document.getElementById('minus');
    const plus = document.getElementById('plus');
    const totalCostLabel = document.getElementById('totalCostLabel');
    const overloadQuantityError = document.getElementById('overloadQuantityError');
    const addToOrderButton = document.getElementById('addToOrderButton');
    const unitsInStock = @Model.UnitsInStock;

    function onMinusClick() {
        onQuantityChange(Number(quantity.value) - 1);
    }

    function onPlusClick() {
        onQuantityChange(Number(quantity.value) + 1);
    }

    function onDiscountChange(value) {
        if (Number(value) < 0) { 
            discount.value = 0;
            value = 0;
        }
        totalCostLabel.textContent = calculateCost(value);
    }

    function calculateCost(discountValue) {
        const cost = parseFloat(unitPrice) * parseFloat(quantity.value);
        const result = cost - (cost / 100) * parseFloat(discountValue);
        return roundNumber(result);
    }

    function onQuantityChange(value) {
        if (String(value).match(/[^$,.\d]/) || value < 0) {
            value = 0;
            minus.disabled = true;
            addToOrderButton.disabled = true;
        }
        else {
            if (value > unitsInStock) {
                value = unitsInStock;
                overloadQuantityError.style.color = 'red';
                minus.disabled = false;
                plus.disabled = true;
            }
            else { 
                if (value > 0 && value <= unitsInStock) {
                    overloadQuantityError.style.color = 'transparent';
                    addToOrderButton.disabled = false;
                    minus.disabled = false;
                    plus.disabled = false;
                }
                else { 
                    if (value == 0) {
                        addToOrderButton.disabled = true;
                        minus.disabled = true;
                        plus.disabled = false;
                    }
                }
            }
        }

        quantity.value = value;
        totalCostLabel.textContent = calculateCost(discount.value);  
    }

    function roundNumber(number) {
        var multiplied = Math.pow(10, 2);
        return Math.round(number * multiplied) / multiplied;
    }
</script>

<style>
    .quantity-border {
        border: 1px solid;
        border-radius: 3px;
        border-color: darkgray;
        height: 34px;
        max-width: 500px
    }
</style>