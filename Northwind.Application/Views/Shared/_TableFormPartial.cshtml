@using System.Reflection;
@using Northwind.Bll.Services.Extensions
@model IEnumerable<object>

@functions {
    string? ControllerName => ViewData["ControllerName"] == null ? "" : ViewData["ControllerName"]!.ToString();
    string? Method => ViewData["FormMethod"] == null ? "get" : ViewData["FormMethod"]!.ToString();
    PropertyInfo[] Properties => Model.Any() ? Model.First().GetType().GetProperties() : new PropertyInfo[0];
    IEnumerable<string> PropertyNames => Properties.Select(x => x.Name).Where(x => !x.Contains("Id"));
    string Disabled => User.IsInRole("admin") ? "" : "disabled";
    string? Hidden => ViewData["Hidden"] == null ? "" : ViewData["Hidden"]!.ToString();

    IEnumerable<object?> GetPropertyValues(object? item)
    {
        if (item == null)
        {
            yield return null;
        }

        foreach (var propertyName in PropertyNames)
        {  
            object value = null;

            try
            {
                value = item.GetType().GetProperty(propertyName).GetValue(item);
            }
            catch (ArgumentNullException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (NullReferenceException ex)
            {
                Console.WriteLine(ex.Message);
            }

            yield return value;
        }
    }

    object? GetId(object item)
    {
        var pk1 = Properties.FirstOrDefault(x => x.Name.Contains("Id") && ControllerName!.Contains(x.Name[..^3]));
        var pk1Value = pk1 == null ? null : pk1.GetValue(item);

        var pk2 = Properties.FirstOrDefault(x => x.Name.Contains("Id") && !ControllerName!.Contains(x.Name[..^3]));
        var pk2Value = pk2 == null ? null : pk2.GetValue(item);

        return IsDetail ? $"{pk1Value} {pk2Value}" : pk1Value;
    }

    string GetDetailsLink(object id) => Url.ActionLink("Details", ControllerName, new { id = id }) ?? "/Home/Index";

    bool IsDetail => ControllerName!.Contains("Detail");
}

<div style="padding-top:20px;">
    <table class="table">
        <thead  style="height:60px;">
            <tr>
                @foreach (var name in PropertyNames)
                {
                    <th class="align-content-center">
                        @name.SplitForUpperCase()
                    </th>
                }
                <th class="text-center align-content-center">
                    <input onchange="onChangeSelectAllHandler(this.checked)" id="selectAllCheckbox" style="margin-left:20px;" type="checkbox" @Disabled @Hidden />
                </th>
            </tr>
        </thead>
        <tbody>
            <form id="form" method="@Method" asp-action=@ViewData["ActionName"] asp-controller=@ControllerName>
                @foreach (var item in base.Model)
                {
                    if (ViewData["ActionName"] == "DeleteConfirmed")
                    {
                        <input value="@GetId(item)" name="ids" type="hidden" />
                    }

                    <tr class="@(!IsDetail ? "change-background-color" : "")" style="@(!IsDetail ? "cursor:pointer" : "")">
                         @foreach (var value in GetPropertyValues(item))
                         {
                             <td class="align-content-center" onclick=@(!IsDetail ? $"location.href='{GetDetailsLink(GetId(item)!)}'" : "")>
                                @if (value is byte[])
                                {
                                    <img src="data:image/bmp;base64,@Convert.ToBase64String(value as byte[] ?? new byte[0])" style="height:60px;width:60px;" />
                                }
                                else
                                {
                                    @if (value is DateTime)
                                    {
                                        @(((DateTime)value).ToShortDateString())
                                    }
                                    else
                                    {
                                        @if (value is decimal)
                                        {
                                            @(((decimal)value).ToString("f2"))
                                        }
                                        else
                                        {
                                            @value
                                        }
                                    }
                                }
                            </td>
                         }
                        <td class="text-center align-content-center">
                            <input name="ids" type="checkbox" id="@GetId(item)" value="@GetId(item)" style="margin-left:20px;" onclick="onChangeHandler(this)" @Disabled @Hidden />
                        </td>
                    </tr>
                }
            </form>
        </tbody>
    </table>
</div>

@if (ViewData["PreviousPage"] != null)
{
    <button class="btn btn-primary fw-bold" onclick="location.href = '@ViewData["PreviousPage"]'">Back</button>
}
