@using System.Reflection;
@using Microsoft.IdentityModel.Tokens
@using Northwind.Application.Constants
@using Northwind.Application.Services
@using Northwind.Bll.Services.Extensions
@using System.Globalization
@model IEnumerable<object>

@functions {
    string? ControllerName => ViewData["ControllerName"] == null ? "" : ViewData["ControllerName"]!.ToString();
    string? Method => ViewData["FormMethod"] == null ? "get" : ViewData["FormMethod"]!.ToString();
    string Disabled => User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Owner) ? "" : "disabled";
    string? Hidden => ViewData["Hidden"] == null ? "" : ViewData["Hidden"]!.ToString();
    string ActionName => ViewData["ActionName"] as string ?? "";
    string ForeignKeyName => ViewData["ForeignKeyName"] as string ?? "";
    string ForeignKeyValue => ViewData["ForeignKeyValue"]?.ToString() ?? "";
    int? PageStartNumbering => (int?)ViewData["PageStartNumbering"] ?? 1;
    string? BackButtonName => $"To {CultureInfo.CurrentCulture.TextInfo.ToTitleCase(ForeignKeyName.Replace("Id", ""))} Details";
    bool IsOrderDetails => ControllerName! == "OrderDetails";
    Dictionary<string, int>? ColumnWidths => ViewData["ColumnWidths"] as Dictionary<string, int>;

    PropertyInfo[] Properties => Model.Any() ? Model.First().GetType().GetProperties() : new PropertyInfo[0];
    IEnumerable<string> PropertyNames => Properties.Select(x => x.Name).Where(x => !x.Contains("Id"));

    IEnumerable<object?> GetPropertyValues(object? item)
    {
        if (item == null)
        {
            yield return null;
        }

        foreach (var propertyName in PropertyNames)
        {  
            object? value = null;

            try
            {
                value = item?.GetType().GetProperty(propertyName)?.GetValue(item);
            }
            catch (ArgumentNullException ex)
            {
                Console.WriteLine(ex.Message);
            }
            catch (NullReferenceException ex)
            {
                Console.WriteLine(ex.Message);
            }

            yield return value;
        }
    }

    object? GetId(object item)
    {
        var primaryKeyOne = Properties.FirstOrDefault(x => x.Name.Contains("Id") && ControllerName!.Contains(x.Name[..^3]));
        var primaryKeyOneValue = primaryKeyOne == null ? null : primaryKeyOne.GetValue(item);

        var primaryKeyTwo = Properties.FirstOrDefault(x => x.Name.Contains("Id") && !ControllerName!.Contains(x.Name[..^3]));
        var primaryKeyTwoValue = primaryKeyTwo == null ? null : primaryKeyTwo.GetValue(item);

        return IsOrderDetails ? $"{primaryKeyOneValue} {primaryKeyTwoValue}" : primaryKeyOneValue;
    }

    string GetLink(object id)
    {
        var defaultRoute = "/Home/Index";

        if (User.IsInRole(UserRoles.Customer) && !(User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Owner)))
        {
            if (ControllerName == "Orders")
            {
                return Url.ActionLink("Index", "OrderDetails", new { orderId = id }) ?? defaultRoute;
            }

            if (ControllerName == "Products")
            {
                return Url.ActionLink("Create", "OrderDetails", new { productId = id }) ?? defaultRoute;
            }
        }

        return Url.ActionLink("Details", ControllerName, new { id = id }) ?? defaultRoute;
    }

    
}

<div class="pt-1">
    <table class="table table-striped" style="width:100%">
        <colgroup>
            <col span="1">
            @foreach (var name in PropertyNames)
            {
                <col span="1" style="@(ColumnWidths != null ? $"width:{ColumnWidths[name]}%" : "")">
            }

            @if (User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Owner))
            {
                <col span="1">
            }
        </colgroup>

        <thead style="height:60px;">
            <tr>
                <th class="align-content-center">№</th>
                @foreach (var name in PropertyNames)
                {
                    <th class="align-content-center" onclick="sortColumn('@name')" style="cursor:pointer">
                        @{
                            var ending = "";

                            if (name.Contains("Price") || name.Contains("Cost"))
                            {
                                ending = ", $";    
                            }

                            if (name.Contains("Discount"))
                            {
                                ending = ", %";
                            }
                        }
                        @(name.SplitForUpperCase() + ending)
                    </th>
                }

                @if (User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Owner))
                {
                    <th class="text-center align-content-center">
                        <input onchange="onChangeSelectAllHandler(this.checked)" id="selectAllCheckbox" style="margin-left:20px;" type="checkbox" @Disabled @Hidden />
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            <form id="form" method="@Method" asp-action=@ViewData["ActionName"] asp-controller=@ControllerName>
            @{
                var number = PageStartNumbering;

                @foreach (var item in base.Model)
                {
                    if (ActionName == "DeleteConfirmed")
                    {
                        <input value="@GetId(item)" name="ids" type="hidden" />
                    }

                    <tr class="@(!IsOrderDetails ? "change-background-color" : "")" style="@(!IsOrderDetails ? "cursor:pointer" : "")">

                        <td class="align-content-center">@(number++)</td>

                        @foreach (var value in ViewAdditions.GetPropertyValues(item, PropertyNames))
                        {
                            var style = ViewAdditions.GetOrderStatusStyle(value);

                            <td class="align-content-center" style="@style" onclick=@(!IsOrderDetails ? $"location.href='{GetLink(GetId(item)!)}'" : "")>
                                @if (value is byte[])
                                {
                                   <img src="data:image/bmp;base64,@Convert.ToBase64String(value as byte[] ?? new byte[0])" style="height:60px;width:60px;" />
                                }
                                else
                                {
                                    @if (value is DateTime)
                                    {
                                        @(((DateTime)value).ToShortDateString())
                                    }
                                    else
                                    {
                                        @if (value is decimal)
                                        {
                                            @(((decimal)value).ToString("f2"))
                                        }
                                        else
                                        {
                                            @if (value is float)
                                            {
                                                @(((float)value).ToString("f2"))
                                            }
                                            else
                                            {
                                                @value
                                            }
                                        }
                                    }
                                }
                            </td>
                        }
                        @if (User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Owner))
                        {
                            <td class="text-center align-content-center">
                                <input name="ids" type="checkbox" id="@GetId(item)" value="@GetId(item)" style="margin-left:20px;" 
                                    onclick="onChangeHandler(this)" @Disabled @Hidden />
                            </td>
                        }
                    </tr>
                }
            }
            </form>
        </tbody>
    </table>
</div>

@if (ViewData["PreviousPage"] != null && (User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Owner)) && !IsOrderDetails)
{
    <button class="btn btn-primary fw-bold" onclick="location.href = '@ViewData["PreviousPage"]'" 
        @(ForeignKeyValue != "" && ForeignKeyValue != "0" ? "" : "hidden")>
        @BackButtonName
    </button>
}

<script>
    function sortColumn(name) {
        const url = `/${'@ControllerName'}/Index?${'@ForeignKeyName'}=${'@ForeignKeyValue'}&sortBy=${name}`;
        window.location.href = window.location.origin.concat(url);
    }
</script>