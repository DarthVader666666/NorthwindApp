@using System.Reflection;
@using Northwind.Application.Constants
@using Northwind.Bll.Enums
@using Northwind.Bll.Services
@using Northwind.Bll.Services.Extensions
@model object

@functions {
    string? ControllerName => ViewData["ControllerName"] != null ? ViewData["ControllerName"]?.ToString() : "";
    PropertyInfo[] Properties => Model.GetType().GetProperties();
    string IdName => Properties.First(x => ControllerName!.Contains(x.Name[..^3]) && x.Name.Contains("Id")).Name;
    object? IdValue => Properties.First(x => ControllerName!.Contains(x.Name[..^3]) && x.Name.Contains("Id")).GetValue(Model);
    bool IsAdminOrOwner => User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Owner);
    bool IsCustomer => User.IsInRole(UserRoles.Customer);

    string? GetLink(string forController = "")
    {
        return (forController, ControllerName) switch
        {
            ("OrderDetails", "Orders") => Url.ActionLink("Index", forController, new { orderId = IdValue }),
            ("OrderDetails", "Products") => Url.ActionLink("Index", forController, new { productId = IdValue }),
            ("Products", "Suppliers") => Url.ActionLink("Index", forController, new { supplierId = IdValue }),
            ("Products", "Categories") => Url.ActionLink("Index", forController, new { categoryId = IdValue }),
            ("Orders", "Customers") => Url.ActionLink("Index", forController, new { customerId = IdValue }),
            _ => Url.ActionLink("Index", forController)
        };
    }

    string GetNames(Type type, object? value)
    {
        var nameProperties = type.GetProperties().Where(x => x.Name.Contains("Name"));
        return string.Join(" ", nameProperties.Select(x => x.GetValue(value) as string));
    }
}

<div>
    <dl class="row border-1">
        @{
            var image = Properties.FirstOrDefault(x => x.GetValue(Model) is byte[]);

            if (image != null)
            {
                var imageValue = image.GetValue(Model) as byte[];

                <dt class="col-sm-2">Picture</dt>
                <dd class="col-sm-10">
                    <img 
                        src="data:image/bmp;base64,@Convert.ToBase64String(
                            ImageConverter.ConvertNorthwindPhoto(image.GetValue(Model) as byte[] ?? new byte[0]))" 
                        style="height:120px;width:120px;" 
                    />
                </dd>
            }
        }

        @foreach (var item in Properties.Where(x => !x.Name.Contains("Id") && !(x.GetValue(Model) is byte[])))
        {
            var value = item.GetValue(Model);
            var type = value != null ? value.GetType() : null;
            var id = type != null ? type.GetProperty(type.Name + "Id") : null;

            <dt class="col-sm-2">@item.Name.SplitForUpperCase()</dt>
            <dd class="col-sm-10">

                @if (value is IEnumerable<object>)
                {
                    <a href=@GetLink(forController:item.Name) class="fw-bold">Show @item.Name.SplitForUpperCase()</a>
                }
                else
                {
                    if (id != null && id.Name == type!.Name + "Id")
                    {
                        <a href=@Url.ActionLink("Details", type.Name[^1] == 'y' ? type.Name[..^1] + "ies" : type.Name + "s", new { id = id.GetValue(value) }) class="fw-bold">
                            @GetNames(type, value)
                        </a>
                    }
                    else
                    {
                        if (value is DateTime)
                        {
                            @(((DateTime)value).ToShortDateString())
                        }
                        else
                        {
                            @if (value is decimal)
                            {
                                @(((decimal)value).ToString("f2") + (item.Name.Contains("Price") || item.Name.Contains("Cost") ? ", $" : ""))
                            }
                            else
                            {
                                @value
                            }
                        }
                    }
                }
            </dd>
        }
    </dl>
</div>

@if (User.IsInRole(UserRoles.Admin) || User.IsInRole(UserRoles.Owner))
{
    <button class="btn btn-primary fw-bold" @(IsAdminOrOwner ? "" : "disabled") onclick="location.href = '@Url.ActionLink("Edit", ControllerName, new { id = IdValue })'">
        Edit
    </button>
}

@if (ControllerName == "Products" && IsCustomer)
{
    <button class="btn btn-primary fw-bold" @(IsCustomer ? "" : "disabled") 
        onclick="location.href = '@Url.ActionLink("Create", "OrderDetails", new { productId = IdValue })'" style="margin-left:10px;">
            Order
    </button>
}

@if (ViewData["PreviousPage"] != null)
{
    <button class="btn btn-primary fw-bold float-end" onclick="location.href = '@ViewData["PreviousPage"]'">Back To List</button>
}
