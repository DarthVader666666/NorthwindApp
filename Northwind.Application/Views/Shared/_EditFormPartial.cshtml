@using System.Reflection;
@using Northwind.Application.Models.Seller
@using Northwind.Bll.Enums
@using Northwind.Bll.Services
@using Northwind.Bll.Services.Extensions
@model object

@functions {
    string ControllerName => ViewData["ControllerName"].ToString().SplitForUpperCase(Model);
    PropertyInfo[] Properties => Model.GetType().GetProperties();
    string IdName => Properties.First(x => ControllerName.Contains(x.Name[..^3]) && x.Name.Contains("Id")).Name;
    object IdValue => Properties.First(x => ControllerName.Contains(x.Name[..^3]) && x.Name.Contains("Id")).GetValue(Model);
    PropertyInfo Image => Properties.FirstOrDefault(x => (x.Name.Contains("Image") || x.Name.Contains("Picture") || x.Name.Contains("Photo")) && x.PropertyType.FullName.Contains("Byte"));
    PropertyInfo[] SelectLists => Properties.Where(x => x.PropertyType.FullName.Contains("SelectList")).ToArray();
}

<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" enctype="multipart/form-data">
            @{
                if (Image != null)
                {
                    var imageValue = Image.GetValue(Model) as byte[];

                    <label class="control-label">@Image.Name</label>
                    @await Html.PartialAsync("_ImageInputPartial", Model)

                    <div class="form-group">
                        <img id="image" src="data:image/jpg;base64,@Convert.ToBase64String(
                            ImageConverter.ConvertNorthwindPhoto(Image.GetValue(Model) as byte[] ?? new byte[0]))"
                             style="height:120px;width:120px;cursor:pointer" onclick="onImageClickHandler()" />
                    </div>
                }
            }

            @foreach (var item in Properties.Where(x => !(x.GetValue(Model) is byte[])))
            {
                var value = item.GetValue(Model);
                var type = item.PropertyType.FullName;
                var hidden = type.Contains("FormFile") || type.Contains("Byte") || SelectLists.Any(x => x.Name != item.Name && x.Name.Contains(item.Name)) || (item.Name.Contains("Id") && !item.Name.Contains("List")) ? "hidden" : "";

                <div class="form-group">
                    <label class="control-label" @hidden>@item.Name.Replace("List", "").Replace("Id", "").SplitForUpperCase()</label>
                    @Html.ValidationMessage(item.Name, new { @class = "text-danger" })

                    @if (type.Contains("SelectList"))
                    {
                        <select class="form-select" name="@item.Name.Replace("List", "")">
                            @foreach (var option in item.GetValue(Model) as SelectList)
                            {
                                if (option.Selected)
                                {
                                    <option value="@option.Value" selected>@option.Text</option>
                                }
                                else
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    }
                    else
                    {
                        if (type.Contains("Bool"))
                        {
                            <input class="form-check-input" type="checkbox" value="true" name="@item.Name" @((bool)value ? "checked" : "") />
                        }
                        else
                        {
                            if (type.Contains("FormFile"))
                            {
                                <input id="fileInput" name="@item.Name" type="file" class="form-control" accept="image/gif,image/bmp,image/jpeg,image/jpg,image/png" onchange="previewFile(this)" style="display:none" />
                            }
                            else
                            {
                                if (type.Contains("DateTime"))
                                {
                                    if (value != null)
                                    {
                                        var date = (DateTime)value;
                                        <input name="@item.Name" value=@($"{date.Year:D4}-{date.Month:D2}-{date.Day:D2}") type="date" class="form-control" />
                                    }
                                    else
                                    {
                                        <input name="@item.Name" type="date" class="form-control" />
                                    }
                                }
                                else
                                {
                                    if (type.Contains("String") && value != null && ((string)value).Length > 100)
                                    {
                                        <textarea class="form-control" name="@item.Name">@value</textarea>
                                    }
                                    else
                                    {
                                        if (!SelectLists.Any(x => x.Name.Contains(item.Name)))
                                        {
                                            <input class="form-control" name="@item.Name" value="@value" @hidden />
                                        }
                                    }
                                }
                            }
                        }
                    }
                </div>
            }

            <div style="padding-top:20px;">
                <input type="submit" value="Save" class="btn btn-primary fw-bold" />
                <a asp-action="Details" asp-route-id="@IdValue" class="float-end fw-bold btn btn-primary">Back</a>
            </div>
        </form>
    </div>
</div>
