@using System.Reflection;
@using Northwind.Application.Models.Employee
@using Northwind.Bll.Enums
@using Northwind.Bll.Services
@using Northwind.Bll.Services.Extensions
@model object

@functions {
    PropertyInfo[] Properties => Model.GetType().GetProperties();
    string Disabled => User.IsInRole("admin") ? "" : "disabled";
    PropertyInfo FormFileProperty => Properties.FirstOrDefault(x => x.GetValue(Model) is IFormFile);
    string? FormFile => FormFileProperty == null ? null : FormFileProperty.Name;
    PropertyInfo Image => Properties.FirstOrDefault(x => (x.Name.Contains("Image") || x.Name.Contains("Picture") || x.Name.Contains("Photo")) && x.PropertyType.FullName.Contains("Byte"));
    PropertyInfo[] SelectLists => Properties.Where(x => x.PropertyType.FullName.Contains("SelectList")).ToArray();

    object SetPropertyName(string name)
    {
        ViewData["PropertyName"] = name;
        return ViewData;
    }
}

<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" id="form" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            @{
                if (Image != null)
                {
                    var imageValue = Image.GetValue(Model) as byte[];

                    <label class="control-label">@Image.Name</label>

                    <div class="form-group">
                        <img id="image" src="data:image/jpg;base64,@Convert.ToBase64String(
                            ImageConverter.ConvertNorthwindPhoto(Image.GetValue(Model) as byte[] ?? new byte[0]))"
                             style="height:120px;width:120px;cursor:pointer" onclick="onImageClickHandler()" />
                    </div>
                }
            }

            @foreach (var item in Properties.Where(x => !(x.GetValue(Model) is byte[])))
            {
                var type = item.PropertyType.FullName;
                var hidden = type.Contains("IFormFile") || SelectLists.Any(x => x.Name != item.Name && x.Name.Contains(item.Name)) ? "hidden" : "";

                <div class="form-group">
                    <label class="control-label" @hidden>@item.Name.Replace("List", "").Replace("Id", "").SplitForUpperCase()</label>
                    @await Html.PartialAsync("_ValidationSpanPartial", Model, SetPropertyName(item.Name) as ViewDataDictionary)

                    @if (type.Contains("DateTime"))
                    {
                        <input name="@item.Name" type="date" class="form-control" />
                    }

                    @if (type.Contains("String"))
                    {
                        <input name="@item.Name" class="form-control" />
                    }

                    @if (type.Contains("SelectList"))
                    {
                        <select class="form-select" name="@item.Name.Replace("List", "")">
                            @foreach (var option in item.GetValue(Model) as SelectList)
                            {
                                if (option.Selected)
                                {
                                    <option value="@option.Value" selected>@option.Text</option>
                                }
                                else
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                    }

                    @if (type.Contains("Int") && !item.Name.Contains("Id") && !SelectLists.Any(x => x.Name.Contains(item.Name)))
                    {
                        <input type="number" name="@item.Name" class="form-control" />
                    }

                    @if (type.Contains("Decimal"))
                    {
                        <input type="text" name="@item.Name" class="form-control" />
                    }

                    @if (type.Contains("Bool"))
                    {
                        <input class="form-check-input" type="checkbox" name="@item.Name" />
                    }

                    @if (type.Contains("IFormFile"))
                    {
                        <input id="fileInput" name="@item.Name" type="file" class="form-control" accept="image/gif,image/bmp,image/jpeg,image/jpg,image/png" onchange="previewFile(this)" style="display:none" />
                    }
                </div>
            }
        </form>
    </div>
</div>

<div style="padding-top:20px;">
    <input type="submit" form="form" value="Create" class="btn btn-primary fw-bold" />

    @if (ViewData["PreviousPage"] != null)
    {
        <button class="btn btn-primary fw-bold float-end" onclick="location.href = '@ViewData["PreviousPage"]'">Back</button>
    }
</div>
